name: Run Jest Tests

on:
  deployment_status:

jobs:
  run-tests:
    if: github.event_name == 'deployment_status' && github.event.deployment_status.state == 'success'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v2

      # Step 2: Fetch all branches and determine the source branch
      - name: Get Deployment Source Branch
        id: get-branch
        run: |
          echo "Fetching all branches to determine the source branch."
          git fetch --all
          echo "Fetched all branches:"
          git branch -r

          echo "Finding branches containing the deployment commit: ${{ github.event.deployment.ref }}"
          source_branches=$(git branch -a --contains ${{ github.event.deployment.ref }})
          echo "Branches containing the commit:"
          echo "$source_branches"

          branch_name=$(echo "$source_branches" | tail -n1 | sed 's|remotes/origin/||' | xargs)
          echo "Determined branch name: $branch_name"

          if [ -z "$branch_name" ]; then
            echo "Error: Could not determine the branch name from the commit."
            exit 1
          fi

          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      # Step 4: Install Vercel CLI
      - name: Install Vercel CLI
        run: npm install -g vercel

      # Step 5: Pull Vercel Environment Variables
      - name: Pull Vercel Environment Variables
        run: |
          echo "Starting the process to pull Vercel environment variables."
          BRANCH_NAME="${{ steps.get-branch.outputs.branch_name }}"
          echo "Using branch name: $BRANCH_NAME"

          echo "Linking to the chomp-dev project under the gator-labs scope."
          vercel link --scope gator-labs --yes --project chomp-dev --token ${{ secrets.VERCEL_TOKEN }}

          echo "Pulling environment variables for the preview environment and branch: $BRANCH_NAME"
          vercel env pull --environment=preview --git-branch=$BRANCH_NAME .env --scope=gator-labs --token=${{ secrets.VERCEL_TOKEN }}

          echo "Pulled environment variables (keys and values, excluding DATABASE_URL redaction):"
          cat .env

      # Step 6: Verify and Sanitize Environment Variables
      - name: Verify and Sanitize DATABASE_URL
        run: |
          echo "Loading .env file."
          source .env

          echo "Verifying the DATABASE_URL and DATABASE_URL_UNPOOLED."
          echo "DATABASE_URL: $DATABASE_URL"
          echo "DATABASE_URL_UNPOOLED: $DATABASE_URL_UNPOOLED"

          # Ensure the protocol is valid
          if [[ $DATABASE_URL != postgres://* ]] && [[ $DATABASE_URL != postgresql://* ]]; then
            echo "Error: DATABASE_URL does not have a valid protocol."
            exit 1
          fi

          if [[ $DATABASE_URL_UNPOOLED != postgres://* ]] && [[ $DATABASE_URL_UNPOOLED != postgresql://* ]]; then
            echo "Error: DATABASE_URL_UNPOOLED does not have a valid protocol."
            exit 1
          fi

          # Remove quotes if present
          DATABASE_URL=$(echo $DATABASE_URL | sed 's/^"\|"$//g')
          DATABASE_URL_UNPOOLED=$(echo $DATABASE_URL_UNPOOLED | sed 's/^"\|"$//g')

          echo "Sanitized DATABASE_URL: $DATABASE_URL"
          echo "Sanitized DATABASE_URL_UNPOOLED: $DATABASE_URL_UNPOOLED"

          # Save sanitized variables to GitHub environment
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
          echo "DATABASE_URL_UNPOOLED=$DATABASE_URL_UNPOOLED" >> $GITHUB_ENV

      # Step 7: Install Dependencies
      - name: Install Dependencies
        run: |
          echo "Installing project dependencies."
          npm install

      # Step 8: Run Jest Tests
      - name: Run Jest Tests
        run: |
          echo "Running Jest tests using the pulled and sanitized environment variables."
          npm run gh-test

name: Run Jest Tests

on:
  deployment_status:

jobs:
  run-tests:
    if: github.event_name == 'deployment_status' && github.event.deployment_status.state == 'success'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Check out the repository
        id: checkout
        uses: actions/checkout@v2
        
      - name: Print debug info
        run: |
          echo "====================== DEBUG INFO ======================"
          echo "GitHub event name: ${{ github.event_name }}"
          echo "GitHub event action: ${{ github.event.action }}"
          echo "Deployment status: ${{ github.event.deployment_status.state }}"
          echo "Deployment URL: ${{ github.event.deployment_status.target_url }}"
          echo "Deployment environment: ${{ github.event.deployment.environment }}"
          echo "Ref: ${{ github.event.deployment.ref }}"
          echo "Workspace: ${{ github.workspace }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run attempt: ${{ github.run_attempt }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "====================== END DEBUG INFO =================="

      # Step 2: Get Branch Name directly from the ref
      - name: Get Branch Name
        id: get-branch
        run: |
          echo "üìã [Step 2] Getting branch name from deployment ref..."
          branch_name="${{ github.event.deployment.ref }}"
          echo "Using branch name: $branch_name"
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
          echo "‚úÖ [Step 2] Branch name extracted successfully: $branch_name"

      # Step 3: Set up Node.js
      - name: Set up Node.js
        id: setup-node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"
          
      - name: Verify Node setup
        run: |
          echo "üìã [Step 3] Verifying Node.js setup..."
          node --version
          yarn --version
          echo "‚úÖ [Step 3] Node.js setup verified"

      # Step 4: Install Vercel CLI
      - name: Install Vercel CLI
        id: install-vercel
        run: |
          echo "üìã [Step 4] Installing Vercel CLI..."
          yarn global add vercel
          vercel --version
          echo "‚úÖ [Step 4] Vercel CLI installed successfully"

      # Step 5: Pull Vercel Environment Variables
      - name: Pull Vercel Environment Variables
        id: pull-vercel-env
        run: |
          echo "üìã [Step 5] Starting the process to pull Vercel environment variables..."
          BRANCH_NAME="${{ steps.get-branch.outputs.branch_name }}"
          echo "Using branch name: $BRANCH_NAME"

          echo "Linking to Vercel project..."
          vercel link --scope gator-labs --yes --project chomp-dev --token ${{ secrets.VERCEL_TOKEN }}
          if [ $? -ne 0 ]; then
            echo "‚ùå [Step 5] Error: Failed to link to Vercel project"
            exit 1
          fi
          echo "Successfully linked to Vercel project"
          
          # pull the correct environment variables
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "Main branch detected - pulling production environment variables"
            vercel env pull --environment=production .env --scope=gator-labs --token=${{ secrets.VERCEL_TOKEN }}
            if [ $? -ne 0 ]; then
              echo "‚ùå [Step 5] Error: Failed to pull production environment variables"
              exit 1
            fi
          else
            echo "Preview branch detected - pulling preview environment variables"
            vercel env pull --environment=preview --git-branch=$BRANCH_NAME .env --scope=gator-labs --token=${{ secrets.VERCEL_TOKEN }}
            if [ $? -ne 0 ]; then
              echo "‚ùå [Step 5] Error: Failed to pull preview environment variables"
              exit 1
            fi
          fi
          
          echo "Checking if .env file was created..."
          if [ -f .env ]; then
            echo ".env file exists"
            echo "Number of lines in .env: $(wc -l < .env)"
            echo "First few variables (names only):"
            grep -v "^#" .env | cut -d= -f1 | head -5
          else
            echo "‚ùå [Step 5] Warning: .env file does not exist"
          fi
          
          echo "‚úÖ [Step 5] Successfully pulled Vercel environment variables"

      # Step 6: Create or reuse a Neon test branch and set DATABASE_URL
      - name: Configure Neon Test Branch
        id: neon
        run: |
          echo "üìã [Step 6] Configuring Neon test branch..."
          set -e

          echo "Installing jq for JSON parsing..."
          sudo apt-get update && sudo apt-get install -y jq
          jq --version

          BRANCH_NAME="${{ steps.get-branch.outputs.branch_name }}"
          NEON_PROJECT_ID="${{ secrets.NEON_PROJECT_ID }}"
          NEON_API_KEY="${{ secrets.NEON_API_KEY }}"
          GITHUB_RUN_ID="${{ github.run_id }}"
          
          echo "Variables set:"
          echo "- BRANCH_NAME: $BRANCH_NAME"
          echo "- NEON_PROJECT_ID: ${NEON_PROJECT_ID:0:5}... (redacted)"
          echo "- GITHUB_RUN_ID: $GITHUB_RUN_ID"
          
          if [ -z "$NEON_PROJECT_ID" ]; then
            echo "‚ùå [Step 6] Error: NEON_PROJECT_ID is not set. Please add it to your GitHub secrets."
            exit 1
          fi
          
          if [ -z "$NEON_API_KEY" ]; then
            echo "‚ùå [Step 6] Error: NEON_API_KEY is not set. Please add it to your GitHub secrets."
            exit 1
          fi

          # 1) List all branches
          echo "Listing all branches in Neon project..."
          list_json=$(curl --silent --request GET \
              --url "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches?sort_by=updated_at&sort_order=desc&limit=10000" \
              --header "accept: application/json" \
              --header "authorization: Bearer $NEON_API_KEY")
          
          # Check if the API request was successful
          if [[ "$list_json" == *"\"error\":"* ]]; then
            echo "‚ùå [Step 6] Error: Failed to list branches from Neon API:"
            echo "$list_json" | jq .
            exit 1
          fi

          # Debug: Check the structure of the response
          echo "DEBUG: API response structure"
          echo "$list_json" | jq 'keys'
          echo "Number of branches: $(echo "$list_json" | jq '.branches | length')"
          echo "First few branch names:"
          echo "$list_json" | jq -r '.branches[0:3] | map(.name) | .[]'

          if [ "$BRANCH_NAME" = "main" ]; then
            # ================
            # MAIN BRANCH LOGIC
            # ================
            echo "GitHub branch is 'main'. We'll always create a new Neon branch for each run."

            # Use the Neon branch named = "main" as the parent
            PARENT_BRANCH_NAME="main"
            echo "Looking for parent branch with name: $PARENT_BRANCH_NAME"

            parent_id=$(echo "$list_json" | jq -r --arg name "$PARENT_BRANCH_NAME" '.branches[] | select(.name == $name) | .id')
            if [ -z "$parent_id" ]; then
              echo "‚ùå [Step 6] Error: No Neon parent branch found with name '$PARENT_BRANCH_NAME'."
              echo "Available branch names:"
              echo "$list_json" | jq -r '.branches[] | .name'
              exit 1
            fi
            echo "Found parent branch"

            # Construct a fresh test branch name for each run, e.g. test/main-123456789
            TEST_BRANCH="test/main-$GITHUB_RUN_ID"
            echo "Creating a new Neon branch: $TEST_BRANCH"

            echo "Sending API request to create branch..."
            create_json=$(curl --silent --request POST \
              --url "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches" \
              --header "accept: application/json" \
              --header "authorization: Bearer $NEON_API_KEY" \
              --header "content-type: application/json" \
              --data "{
                \"branch\": {
                  \"parent_id\": \"$parent_id\",
                  \"name\": \"$TEST_BRANCH\"
                }
              }")
            
            # Check if the API request was successful
            if [[ "$create_json" == *"\"error\":"* ]]; then
              echo "‚ùå [Step 6] Error: Failed to create branch in Neon API:"
              echo "$create_json" | jq .
              exit 1
            fi

            test_id=$(echo "$create_json" | jq -r '.branch.id')
            if [ -z "$test_id" ] || [ "$test_id" = "null" ]; then
              echo "‚ùå [Step 6] Error: Failed to extract branch ID from API response:"
              echo "$create_json" | jq .
              exit 1
            fi
            echo "Created new test branch '$TEST_BRANCH' with id '$test_id'."

          else
            # =========================
            # NON-MAIN BRANCH (PREVIEW)
            # =========================
            echo "GitHub branch is '$BRANCH_NAME'. We'll reuse or create a single test branch."

            # The parent branch name in Neon is "preview/<GitHubBranch>"
            PARENT_BRANCH_NAME="preview/$BRANCH_NAME"
            echo "Looking for parent branch with name: $PARENT_BRANCH_NAME"

            # The test branch name is "test/preview/<GitHubBranch>"
            TEST_BRANCH="test/$PARENT_BRANCH_NAME"
            echo "Target test branch name: $TEST_BRANCH"

            # 2) Find the parent branch ID by name
            parent_id=$(echo "$list_json" | jq -r --arg name "$PARENT_BRANCH_NAME" '.branches[] | select(.name == $name) | .id')

            if [ -z "$parent_id" ] || [ "$parent_id" = "null" ]; then
              echo "‚ö†Ô∏è [Step 6] Warning: No Neon parent branch found with name '$PARENT_BRANCH_NAME'."
              echo "Falling back to 'main' branch as parent."
              PARENT_BRANCH_NAME="main"
              parent_id=$(echo "$list_json" | jq -r --arg name "$PARENT_BRANCH_NAME" '.branches[] | select(.name == $name) | .id')
              
              if [ -z "$parent_id" ] || [ "$parent_id" = "null" ]; then
                echo "‚ùå [Step 6] Error: No Neon parent branch found with name 'main' either."
                echo "Available branch names:"
                echo "$list_json" | jq -r '.branches[] | .name'
                exit 1
              fi
            fi
            echo "Found parent branch"

            # 3) Check if the test branch already exists
            echo "Checking if test branch already exists..."
            test_id=$(echo "$list_json" | jq -r --arg pid "$parent_id" --arg tname "$TEST_BRANCH" '
              .branches[] 
              | select(.parent_id == $pid and .name == $tname) 
              | .id
            ')

            # 4) If no existing test branch, create it
            # TODO: In the future, this can be simplified by creating the endpoint at the same time as the branch
            if [ -z "$test_id" ] || [ "$test_id" = "null" ]; then
              echo "No existing test branch '$TEST_BRANCH' found. Creating..."
              create_json=$(curl --silent --request POST \
                --url "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches" \
                --header "accept: application/json" \
                --header "authorization: Bearer $NEON_API_KEY" \
                --header "content-type: application/json" \
                --data "{
                  \"branch\": {
                    \"parent_id\": \"$parent_id\",
                    \"name\": \"$TEST_BRANCH\"
                  }
                }")
              
              # Check if the API request was successful
              if [[ "$create_json" == *"\"error\":"* ]]; then
                echo "‚ùå [Step 6] Error: Failed to create branch in Neon API:"
                echo "$create_json" | jq .
                exit 1
              fi
              
              test_id=$(echo "$create_json" | jq -r '.branch.id')
              if [ -z "$test_id" ] || [ "$test_id" = "null" ]; then
                echo "‚ùå [Step 6] Error: Failed to extract branch ID from API response:"
                echo "$create_json" | jq .
                exit 1
              fi
              echo "Created test branch '$TEST_BRANCH'."
            else
              echo "Found existing test branch '$TEST_BRANCH'."
            fi
          fi

          # 5) Retrieve the password for the test branch (role = neondb_owner)
          echo "Retrieving password for role 'neondb_owner'..."
          pass_resp=$(curl --silent --request GET \
            --url "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches/$test_id/roles/neondb_owner/reveal_password" \
            --header "accept: application/json" \
            --header "authorization: Bearer $NEON_API_KEY")
          
          # Check if the API request was successful
          if [[ "$pass_resp" == *"\"error\":"* ]]; then
            echo "‚ùå [Step 6] Error: Failed to retrieve password from Neon API:"
            echo "$pass_resp" | jq .
            exit 1
          fi

          PASSWORD=$(echo "$pass_resp" | jq -r '.password')
          if [ -z "$PASSWORD" ] || [ "$PASSWORD" = "null" ]; then
            echo "‚ùå [Step 6] Error: Failed to extract password from API response"
            exit 1
          fi
          echo "Successfully retrieved password"

          # 6) Retrieve and ensure we have a working endpoint for the test branch
          echo "Setting up endpoint for test branch..."
          MAX_ATTEMPTS=3
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS: Retrieving endpoint information..."
            
            # Get current endpoints
            endpoint_resp=$(curl --silent --request GET \
              --url "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches/$test_id/endpoints" \
              --header "accept: application/json" \
              --header "authorization: Bearer $NEON_API_KEY")
            
            # Check API response
            if [[ "$endpoint_resp" == *"\"error\":"* ]]; then
              echo "‚ùå [Step 6] Warning: Failed to retrieve endpoints on attempt $ATTEMPT:"
              echo "$endpoint_resp" | jq .
              
              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "‚ùå [Step 6] Error: Maximum attempts reached. Exiting."
                exit 1
              fi
              
              ATTEMPT=$((ATTEMPT+1))
              echo "Retrying in 3 seconds..."
              sleep 3
              continue
            fi
            
            # Count endpoints
            endpoint_count=$(echo "$endpoint_resp" | jq '.endpoints | length')
            echo "Number of endpoints: $endpoint_count"
            
            # If we have at least one endpoint, we're done
            if [ "$endpoint_count" -gt 0 ]; then
              echo "‚úÖ Found working endpoint(s) for this branch."
              break
            fi
            
            # No endpoints found, create one
            echo "No endpoints found. Creating a new endpoint..."
            create_endpoint_resp=$(curl --silent --request POST \
              --url "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/endpoints" \
              --header "accept: application/json" \
              --header "authorization: Bearer $NEON_API_KEY" \
              --header "content-type: application/json" \
              --data "{
                \"endpoint\": {
                  \"type\": \"read_write\",
                  \"branch_id\": \"$test_id\"
                }
              }")
            
            # Check if endpoint creation was successful
            if [[ "$create_endpoint_resp" == *"\"error\":"* ]]; then
              echo "‚ùå [Step 6] Warning: Failed to create endpoint on attempt $ATTEMPT:"
              echo "$create_endpoint_resp" | jq .
              
              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "‚ùå [Step 6] Error: Maximum attempts reached. Exiting."
                exit 1
              fi
              
              ATTEMPT=$((ATTEMPT+1))
              echo "Retrying in 5 seconds..."
              sleep 5
              continue
            fi
            
            new_endpoint_id=$(echo "$create_endpoint_resp" | jq -r '.endpoint.id')
            # echo "Created endpoint"
            echo "Waiting 5 seconds for endpoint provisioning..."
            sleep 5
            
            ATTEMPT=$((ATTEMPT+1))
            # Loop will continue and fetch the endpoints again
          done
          
          # After loop completes, we should have endpoints
          # Extract the endpoint details we need
          endpoint_id=$(echo "$endpoint_resp" | jq -r '.endpoints[0].id')
          if [ -z "$endpoint_id" ] || [ "$endpoint_id" = "null" ]; then
            echo "‚ùå [Step 6] Error: Failed to extract endpoint ID from API response"
            echo "$endpoint_resp" | jq .
            exit 1
          fi
          
          endpoint_proxy_host=$(echo "$endpoint_resp" | jq -r '.endpoints[0].proxy_host')
          if [ -z "$endpoint_proxy_host" ] || [ "$endpoint_proxy_host" = "null" ]; then
            echo "‚ùå [Step 6] Error: Failed to extract proxy host from API response"
            echo "$endpoint_resp" | jq .
            exit 1
          fi
          
          # echo "Endpoint details:"
          # echo "- ID: $endpoint_id"
          # echo "- Proxy host: $endpoint_proxy_host"

          # 7) Construct the final DB URLs
          echo "Constructing database connection URLs..."
          DATABASE_URL="postgresql://neondb_owner:${PASSWORD}@${endpoint_id}-pooler.${endpoint_proxy_host}/neondb?sslmode=require"
          DATABASE_URL_UNPOOLED="postgresql://neondb_owner:${PASSWORD}@${endpoint_id}.${endpoint_proxy_host}/neondb?sslmode=require"

          # Make sure these variables don't have quotes in them
          DATABASE_URL=$(echo "$DATABASE_URL" | sed 's/^"\|"$//g')
          DATABASE_URL_UNPOOLED=$(echo "$DATABASE_URL_UNPOOLED" | sed 's/^"\|"$//g')

          # # Mask the password when printing the connection string
          # MASKED_DATABASE_URL=$(echo "$DATABASE_URL" | sed 's/neondb_owner:[^@]*@/neondb_owner:********@/')
          # MASKED_DATABASE_URL_UNPOOLED=$(echo "$DATABASE_URL_UNPOOLED" | sed 's/neondb_owner:[^@]*@/neondb_owner:********@/')
          
          # echo "Connection URLs (with masked passwords):"
          # echo "- DATABASE_URL: $MASKED_DATABASE_URL"
          # echo "- DATABASE_URL_UNPOOLED: $MASKED_DATABASE_URL_UNPOOLED"

          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
          echo "DATABASE_URL_UNPOOLED=$DATABASE_URL_UNPOOLED" >> $GITHUB_ENV
          echo "NEON_BRANCH_ID=$test_id" >> $GITHUB_ENV
          echo "NEON_BRANCH_NAME=$TEST_BRANCH" >> $GITHUB_ENV
          echo "‚úÖ [Step 6] Neon test branch configuration complete."

      # Step 7: Verify and Sanitize Environment Variables (Optional check)
      - name: Verify and Sanitize DATABASE_URL
        id: verify-db-url
        run: |
          echo "üìã [Step 7] Verifying database connection URLs..."
          echo "Loading .env (if present)."
          if [ -f .env ]; then
            source .env
            echo ".env file loaded"
          else
            echo ".env file not found, continuing with environment variables from previous step"
          fi

          # The DB vars were also exported to GITHUB_ENV above; they should be in the environment now.
          echo "Verifying the DATABASE_URL and DATABASE_URL_UNPOOLED."
          # Mask the password when printing the connection string
          # MASKED_DATABASE_URL=$(echo "$DATABASE_URL" | sed 's/:[^@]*@/:********@/')
          # MASKED_DATABASE_URL_UNPOOLED=$(echo "$DATABASE_URL_UNPOOLED" | sed 's/:[^@]*@/:********@/')
          
          # echo "DATABASE_URL: $MASKED_DATABASE_URL"
          # echo "DATABASE_URL_UNPOOLED: $MASKED_DATABASE_URL_UNPOOLED"

          # Ensure the protocol is valid
          if [[ $DATABASE_URL != postgres://* ]] && [[ $DATABASE_URL != postgresql://* ]]; then
            echo "‚ùå [Step 7] Error: DATABASE_URL does not have a valid protocol."
            exit 1
          fi
          if [[ $DATABASE_URL_UNPOOLED != postgres://* ]] && [[ $DATABASE_URL_UNPOOLED != postgresql://* ]]; then
            echo "‚ùå [Step 7] Error: DATABASE_URL_UNPOOLED does not have a valid protocol."
            exit 1
          fi
          echo "‚úÖ [Step 7] DATABASE_URL and DATABASE_URL_UNPOOLED look valid."

      # Step 8: Install Dependencies
      - name: Install Dependencies
        id: install-deps
        run: |
          echo "üìã [Step 8] Installing project dependencies..."
          
          # Check if package.json exists
          if [ ! -f "package.json" ]; then
            echo "‚ùå [Step 8] Error: package.json not found"
            exit 1
          fi
          
          echo "Package.json found, installing dependencies with yarn..."
          yarn install
          if [ $? -ne 0 ]; then
            echo "‚ùå [Step 8] Error: Failed to install dependencies"
            exit 1
          fi
          
          # List installed dependencies
          echo "Listing top-level dependencies:"
          yarn list --depth=0 | head -10
          
          echo "‚úÖ [Step 8] Dependencies installed successfully"

      # Step 9: Run Jest Tests
      - name: Run Jest Tests
        id: run-tests
        run: |
          echo "üìã [Step 9] Running Jest tests..."
          echo "Checking for existence of test script in package.json..."
          
          # Check if the gh-test-sync script exists
          if ! grep -q "\"gh-test-sync\"" package.json; then
            echo "‚ùå [Step 9] Warning: 'gh-test-sync' script not found in package.json"
            echo "Contents of package.json 'scripts' section:"
            grep -A 20 "\"scripts\"" package.json
          fi
          
          echo "Environment variables for testing:"
          echo "- NODE_ENV: $NODE_ENV"
          echo "- NEON_BRANCH_NAME: $NEON_BRANCH_NAME"
          echo "- NEON_BRANCH_ID: $NEON_BRANCH_ID"
          
          echo "Running tests with 'yarn gh-test-sync'..."
          yarn gh-test-sync
          TEST_EXIT_CODE=$?
          
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "‚ùå [Step 9] Tests failed with exit code $TEST_EXIT_CODE"
            exit $TEST_EXIT_CODE
          fi
          
          echo "‚úÖ [Step 9] Tests completed successfully"

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id                          String                        @id
  isAdmin                     Boolean                       @default(false)
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @default(now()) @updatedAt
  firstName                   String?
  lastName                    String?
  username                    String?
  profileSrc                  String?
  telegramId                  BigInt?                       @unique
  wallets                     Wallet[]
  emails                      Email[]
  questionAnswers             QuestionAnswer[]
  userDeck                    UserDeck[]
  chompResults                ChompResult[]
  fungibleAssetTransactionLog FungibleAssetTransactionLog[]
  revealNfts                  RevealNft[]
  tutorialCompletedAt         DateTime?
  telegramUsername            String?                       @unique
  twitterUsername             String?                       @unique
  isBotSubscriber             Boolean                       @default(false)
  threatLevel                 String?
  threatLevelWindow           DateTime?                     @db.Date
  threatLevelDetails          String?
  MysteryBox                  MysteryBox[]
  DeckRewards                 DeckRewards[]
  QuestionRewards             QuestionRewards[]

  Question          Question[]
  AskQuestionAnswer AskQuestionAnswer[]
}

model Wallet {
  address   String   @id
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Email {
  address   String   @id
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Question {
  id                          Int                           @id @default(autoincrement())
  question                    String
  durationMiliseconds         BigInt?
  type                        QuestionType
  revealToken                 Token                         @default(Bonk)
  revealTokenAmount           Int                           @default(0)
  revealAtDate                DateTime?
  creditCostPerQuestion       Int?
  revealAtAnswerCount         Int?
  imageUrl                    String?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @default(now()) @updatedAt
  questionOptions             QuestionOption[]
  questionTags                QuestionTag[]
  deckQuestions               DeckQuestion[]
  chompResults                ChompResult[]
  stack                       Stack?                        @relation(fields: [stackId], references: [id])
  stackId                     Int?
  isSubmittedByUser           Boolean                       @default(false)
  createdByUserId             String?
  fungibleAssetTransactionLog FungibleAssetTransactionLog[]
  MysteryBoxTrigger           MysteryBoxTrigger[]
  QuestionRewards             QuestionRewards[]

  user              User?               @relation(fields: [createdByUserId], references: [id])
  AskQuestionAnswer AskQuestionAnswer[]
}

model QuestionOption {
  id                                    Int              @id @default(autoincrement())
  option                                String
  isCorrect                             Boolean          @default(false)
  calculatedIsCorrect                   Boolean?
  calculatedAveragePercentage           Int? // avg `percentage` column
  calculatedPercentageOfSelectedAnswers Int? // percentage of people that selected
  isLeft                                Boolean          @default(false)
  createdAt                             DateTime         @default(now())
  updatedAt                             DateTime         @default(now()) @updatedAt
  questionId                            Int
  question                              Question         @relation(fields: [questionId], references: [id])
  questionAnswers                       QuestionAnswer[]
}

model Tag {
  id           Int           @id @default(autoincrement())
  tag          String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  questionTags QuestionTag[]
}

model QuestionTag {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  tagId      Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
}

model Deck {
  id                          Int                           @id @default(autoincrement())
  deck                        String
  date                        DateTime?
  activeFromDate              DateTime?
  revealAtDate                DateTime?
  creditCostPerQuestion       Int?
  revealAtAnswerCount         Int?
  imageUrl                    String?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @default(now()) @updatedAt
  stack                       Stack?                        @relation(fields: [stackId], references: [id])
  stackId                     Int?
  deckQuestions               DeckQuestion[]
  userDeck                    UserDeck[]
  fungibleAssetTransactionLog FungibleAssetTransactionLog[]
  description                 String?
  heading                     String?
  footer                      String?                       @db.VarChar(50)
  author                      String?
  authorImageUrl              String?
  MysteryBoxTrigger           MysteryBoxTrigger[]
  DeckRewards                 DeckRewards[]
}

model UserDeck {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  deckId    Int
  deck      Deck     @relation(fields: [deckId], references: [id])
}

model DeckQuestion {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  deckId     Int
  deck       Deck     @relation(fields: [deckId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  @@unique([deckId, questionId])
}

model QuestionAnswer {
  id                       Int            @id @default(autoincrement())
  questionOptionId         Int
  questionOption           QuestionOption @relation(fields: [questionOptionId], references: [id])
  userId                   String
  user                     User           @relation(fields: [userId], references: [id])
  // Random option assigned by app for second order response 
  isAssigned2ndOrderOption Boolean        @default(false)
  percentage               Int?
  // NOTICE: The actual initial value of status is Viewed
  status                   AnswerStatus   @default(Submitted)
  selected                 Boolean
  timeToAnswer             BigInt?
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @default(now()) @updatedAt

  @@unique([questionOptionId, userId], name: "question_option_user")
  @@index([userId, selected])
}

model AskQuestionAnswer {
  id                          Int                           @id @default(autoincrement())
  questionId                  Int
  question                    Question?                     @relation(fields: [questionId], references: [id])
  userId                      String
  user                        User                          @relation(fields: [userId], references: [id])
  FungibleAssetTransactionLog FungibleAssetTransactionLog[]

  @@unique([questionId, userId])
}

model ChompResult {
  id                       Int               @id @default(autoincrement())
  userId                   String
  user                     User              @relation(fields: [userId], references: [id])
  questionId               Int?
  question                 Question?         @relation(fields: [questionId], references: [id])
  burnTransactionSignature String?
  sendTransactionSignature String?
  rewardTokenAmount        Decimal?
  result                   ResultType
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @default(now()) @updatedAt
  transactionStatus        TransactionStatus
  needsManualReview        Boolean?
  revealNftId              String?           @unique
  revealNft                RevealNft?        @relation(fields: [revealNftId], references: [nftId])

  @@unique([userId, questionId])
  @@index([burnTransactionSignature])
  @@index([sendTransactionSignature])
  @@index([revealNftId])
}

model FungibleAssetTransactionLog {
  id                  Int                @id @default(autoincrement())
  type                TransactionLogType
  asset               FungibleAsset
  createdAt           DateTime           @default(now())
  change              Decimal
  userId              String
  user                User               @relation(fields: [userId], references: [id])
  question            Question?          @relation(fields: [questionId], references: [id])
  questionId          Int?
  askQuestionAnswer   AskQuestionAnswer? @relation(fields: [askQuestionAnswerId], references: [id])
  askQuestionAnswerId Int?
  deck                Deck?              @relation(fields: [deckId], references: [id])
  deckId              Int?
  mysteryBoxPrize     MysteryBoxPrize?   @relation(fields: [mysteryBoxPrizeId], references: [id])
  mysteryBoxPrizeId   String?            @unique
  chainTx             ChainTx?           @relation(fields: [chainTxHash], references: [hash])
  chainTxHash         String?
  creditPack          CreditPack?        @relation(fields: [creditPackId], references: [id])
  creditPackId        String?

  @@unique([type, userId, askQuestionAnswerId])
  @@unique([type, userId, questionId]) // Enforce unique combination of userId and questionId
  @@unique([type, deckId, userId]) // Enforce unique combination of deckId and userId
  @@unique([type, chainTxHash, userId])
}

model RevealNft {
  nftId     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  nftType   NftType

  chompResult ChompResult? @relation

  @@unique([nftId, userId])
}

model Stack {
  id                   Int            @id @default(autoincrement())
  specialId            ESpecialStack? // Identifies special stacks, e.g. community stack
  name                 String
  isActive             Boolean
  isVisible            Boolean        @default(true)
  hideDeckFromHomepage Boolean        @default(false)
  image                String
  questions            Question[]
  createdAt            DateTime       @default(now())
  deck                 Deck[]

  @@unique(specialId)
}

model Banner {
  id        Int      @id @default(autoincrement())
  url       String?
  isActive  Boolean
  image     String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MysteryBox {
  id        String              @id @default(uuid())
  status    EMysteryBoxStatus   @default(New)
  userId    String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now()) @updatedAt
  triggers  MysteryBoxTrigger[]
  user      User                @relation(fields: [userId], references: [id])
}

model MysteryBoxTrigger {
  id                    String               @id @default(uuid())
  triggerType           EBoxTriggerType
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @default(now()) @updatedAt
  question              Question?            @relation(fields: [questionId], references: [id])
  questionId            Int?
  deck                  Deck?                @relation(fields: [deckId], references: [id])
  deckId                Int?
  MysteryBox            MysteryBox?          @relation(fields: [mysteryBoxId], references: [id])
  mysteryBoxId          String
  allowlist             MysteryBoxAllowlist? @relation(fields: [mysteryBoxAllowlistId], references: [address])
  mysteryBoxAllowlistId String?
  campaignMysteryBoxId  String?
  campaignMysteryBox    CampaignMysteryBox?  @relation(fields: [campaignMysteryBoxId], references: [id])
  MysteryBoxPrize       MysteryBoxPrize[]

  @@unique([campaignMysteryBoxId, mysteryBoxAllowlistId])
  @@unique([mysteryBoxId, questionId, triggerType])
  @@unique([mysteryBoxId, deckId, triggerType])
}

model MysteryBoxPrize {
  id                          String                       @id @default(uuid())
  status                      EBoxPrizeStatus              @default(Unclaimed)
  size                        EPrizeSize
  prizeType                   EBoxPrizeType
  tokenAddress                String?
  amount                      String
  claimHash                   String?
  claimFungibleTxId           Int?
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @default(now()) @updatedAt
  claimedAt                   DateTime?
  mysteryBoxTrigger           MysteryBoxTrigger?           @relation(fields: [mysteryBoxTriggerId], references: [id])
  mysteryBoxTriggerId         String?
  fungibleAssetTransactionLog FungibleAssetTransactionLog?
  claimChainTxId              ChainTx?                     @relation(fields: [claimHash], references: [hash])
}

model MysteryBoxAllowlist {
  address                   String                        @id @unique
  createdAt                 DateTime                      @default(now())
  updatedAt                 DateTime                      @default(now()) @updatedAt
  tags                      String?
  MysteryBoxTrigger         MysteryBoxTrigger[]
  CampaignMysteryBoxAllowed CampaignMysteryBoxAllowlist[]
}

model ChainTx {
  hash                        String                        @id
  wallet                      String
  type                        EChainTxType
  solAmount                   String
  tokenAmount                 String?
  tokenAddress                String?
  feeSolAmount                String?
  recipientAddress            String
  status                      EChainTxStatus                @default(New)
  createdAt                   DateTime                      @default(now())
  finalizedAt                 DateTime?
  failedAt                    DateTime?
  FungibleAssetTransactionLog FungibleAssetTransactionLog[]
  MysteryBoxPrize             MysteryBoxPrize[]
  creditPack                  CreditPack?                   @relation(fields: [creditPackId], references: [id])
  creditPackId                String?

  @@index([hash])
}

model CampaignMysteryBox {
  id                          String                        @id @default(uuid())
  name                        String
  infoTitle                   String
  infoBody                    String
  CampaignMysteryBoxAllowlist CampaignMysteryBoxAllowlist[]
  MysteryBoxTrigger           MysteryBoxTrigger[]
  boxType                     String
}

model CampaignMysteryBoxAllowlist {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt
  campaignMysteryBoxId String

  campaignMysteryBox CampaignMysteryBox @relation(fields: [campaignMysteryBoxId], references: [id])

  address             String
  mysteryBoxAllowList MysteryBoxAllowlist @relation(fields: [address], references: [address])

  @@unique([campaignMysteryBoxId, address])
}

model CreditPack {
  id                          String                        @id @default(uuid())
  amount                      Int
  costPerCredit               String
  originalCostPerCredit       String
  isActive                    Boolean
  fungibleAssetTransactionLog FungibleAssetTransactionLog[]
  chainTx                     ChainTx[]
  createdAt                   DateTime                      @default(now())
}

view DeckRewards {
  bonkReward    String
  creditsReward String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  deckId Int  @id
  deck   Deck @relation(fields: [deckId], references: [id])
}

view QuestionRewards {
  bonkReward    String
  creditsReward String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  questionId Int      @id
  question   Question @relation(fields: [questionId], references: [id])
}

enum ESpecialStack {
  CommunityAsk
}

enum EMysteryBoxStatus {
  New
  Opened
  Unopened
}

enum EBoxTriggerType {
  ClaimAllCompleted
  DailyDeckCompleted
  ChompmasStreakAttained
  TutorialCompleted
  RevealAllCompleted
  ValidationReward
  Combined
  CampaignReward
}

enum EBoxPrizeStatus {
  Dismissed
  Unclaimed
  Claimed
}

enum EPrizeSize {
  Small
  Medium
  Large
  Hub
}

enum EBoxPrizeType {
  Token
  Credits
  Points
}

enum QuestionType {
  BinaryQuestion
  MultiChoice
}

enum Token {
  Bonk
}

enum FungibleAsset {
  Point
  Credit
}

enum TransactionLogType {
  RevealAnswer
  CorrectFirstOrder
  CorrectSecondOrder
  AnswerDeck
  AnswerQuestion
  AnswerPaidQuestion
  ConnectX
  ConnectTelegram
  MysteryBox
  PremiumQuestionCharge
  CreditPurchase
  CreditByAdmin
  AskQuestionAccepted
  AskQuestionAnswered
}

enum ResultType {
  Revealed
  Claimed
  Dismissed
}

enum TransactionStatus {
  Pending
  Completed
}

enum NftType {
  Genesis
  Glowburger
  ChompyAndFriends
  ChompyAroundTheWorld
}

enum AnswerStatus {
  // A question will be marked a Viewed as soon as they start answering
  Viewed
  // Submitted questions are only the ones that have both question orders answered
  Submitted
  TimedOut
  Skipped
}

enum EChainTxType {
  CreditPurchase
  MysteryBoxClaim
}

enum EChainTxStatus {
  New
  Confirmed
  Finalized
}

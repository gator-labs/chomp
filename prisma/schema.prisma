generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model User {
  id                          String                        @id
  isAdmin                     Boolean                       @default(false)
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @default(now()) @updatedAt
  firstName                   String?
  lastName                    String?
  username                    String?
  profileSrc                  String?
  wallets                     Wallet[]
  emails                      Email[]
  questionAnswers             QuestionAnswer[]
  userDeck                    UserDeck[]
  chompResults                ChompResult[]
  fungibleAssetBalance        FungibleAssetBalance[]
  fungibleAssetTransactionLog FungibleAssetTransactionLog[]
  streak                      Streak[]
  usedGenesisNfts             UsedGenesisNft[]
}

model Wallet {
  address   String   @id
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Email {
  address   String   @id
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Question {
  id                  Int              @id @default(autoincrement())
  question            String
  durationMiliseconds BigInt?
  type                QuestionType
  revealToken         Token            @default(Bonk)
  revealTokenAmount   Int              @default(0)
  revealAtDate        DateTime?
  revealAtAnswerCount Int?
  imageUrl            String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @default(now()) @updatedAt
  questionOptions     QuestionOption[]
  questionTags        QuestionTag[]
  deckQuestions       DeckQuestion[]
  chompResults        ChompResult[]
}

model QuestionOption {
  id              Int              @id @default(autoincrement())
  option          String
  isCorrect       Boolean          @default(false)
  isLeft          Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  questionId      Int
  question        Question         @relation(fields: [questionId], references: [id])
  questionAnswers QuestionAnswer[]
}

model Tag {
  id           Int           @id @default(autoincrement())
  tag          String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  questionTags QuestionTag[]
}

model QuestionTag {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  tagId      Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
}

model Deck {
  id                  Int            @id @default(autoincrement())
  deck                String
  date                DateTime?
  revealAtDate        DateTime?
  revealAtAnswerCount Int?
  imageUrl            String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @default(now()) @updatedAt
  isActive            Boolean        @default(true)
  deckQuestions       DeckQuestion[]
  userDeck            UserDeck[]
  chompResults        ChompResult[]
}

model UserDeck {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  deckId    Int
  deck      Deck     @relation(fields: [deckId], references: [id])
}

model DeckQuestion {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  deckId     Int
  deck       Deck     @relation(fields: [deckId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
}

model QuestionAnswer {
  id                       Int            @id @default(autoincrement())
  questionOptionId         Int
  questionOption           QuestionOption @relation(fields: [questionOptionId], references: [id])
  userId                   String
  user                     User           @relation(fields: [userId], references: [id])
  percentage               Int?
  hasViewedButNotSubmitted Boolean        @default(false)
  selected                 Boolean
  timeToAnswer             BigInt?
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @default(now()) @updatedAt
}

model ChompResult {
  id                   Int        @id @default(autoincrement())
  userId               String
  user                 User       @relation(fields: [userId], references: [id])
  questionId           Int?
  question             Question?  @relation(fields: [questionId], references: [id])
  deckId               Int?
  deck                 Deck?      @relation(fields: [deckId], references: [id])
  transactionSignature String?
  result               ResultType
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @default(now()) @updatedAt
}

model FungibleAssetTransactionLog {
  id        Int                @id @default(autoincrement())
  type      TransactionLogType
  asset     FungibleAsset
  createdAt DateTime           @default(now())
  change    Decimal
  userId    String
  user      User               @relation(fields: [userId], references: [id])
}

model FungibleAssetBalance {
  asset  FungibleAsset
  amount Decimal
  userId String
  user   User          @relation(fields: [userId], references: [id])

  @@id([asset, userId])
}

model Streak {
  id              Int      @id @default(autoincrement())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  streakStartedAt DateTime @default(now())
  lastDayOfStreak DateTime @default(now()) @updatedAt
}

model UsedGenesisNft {
  nftId  String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum QuestionType {
  BinaryQuestion
  MultiChoice
}

enum Token {
  Bonk
}

enum FungibleAsset {
  Point
}

enum TransactionLogType {
  RevealAnswer
  CorrectFirstOrder
  CorrectSecondOrder
  AnswerDeck
  AnswerQuestion
}

enum ResultType {
  Revealed
  Claimed
  Dismissed
}

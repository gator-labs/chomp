generator client {
  provider = "prisma-client-js"
  output = "../node_modules/prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model User {
  id                   String                 @id
  isAdmin              Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  firstName            String?
  lastName             String?
  username             String?
  profileSrc           String?
  wallets              Wallet[]
  emails               Email[]
  questionAnswers      QuestionAnswer[]
  userDeck             UserDeck[]
  reveals              Reveal[]
  fungibleAssetBalance FungibleAssetBalance[]
}

model Wallet {
  address   String   @id
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Email {
  address   String   @id
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Question {
  id                  Int              @id @default(autoincrement())
  question            String
  durationMiliseconds BigInt?
  type                QuestionType
  revealToken         Token            @default(Bonk)
  revealTokenAmount   Int              @default(0)
  revealAtDate        DateTime?
  revealAtAnswerCount Int?
  imageUrl            String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @default(now()) @updatedAt
  questionOptions     QuestionOption[]
  questionTags        QuestionTag[]
  deckQuestions       DeckQuestion[]
  reveals             Reveal[]
}

model QuestionOption {
  id              Int              @id @default(autoincrement())
  option          String
  isTrue          Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  questionId      Int
  question        Question         @relation(fields: [questionId], references: [id])
  questionAnswers QuestionAnswer[]
}

model Tag {
  id           Int           @id @default(autoincrement())
  tag          String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  questionTags QuestionTag[]
}

model QuestionTag {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  tagId      Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
}

model Deck {
  id                  Int            @id @default(autoincrement())
  deck                String
  date                DateTime?
  revealAtDate        DateTime?
  revealAtAnswerCount Int?
  imageUrl            String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @default(now()) @updatedAt
  isActive            Boolean        @default(true)
  deckQuestions       DeckQuestion[]
  userDeck            UserDeck[]
  reveals             Reveal[]
}

model UserDeck {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  deckId    Int
  deck      Deck     @relation(fields: [deckId], references: [id])
}

model DeckQuestion {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  deckId     Int
  deck       Deck     @relation(fields: [deckId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
}

model QuestionAnswer {
  id                       Int            @id @default(autoincrement())
  questionOptionId         Int
  questionOption           QuestionOption @relation(fields: [questionOptionId], references: [id])
  userId                   String
  user                     User           @relation(fields: [userId], references: [id])
  percentage               Int?
  hasViewedButNotSubmitted Boolean        @default(false)
  selected                 Boolean
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @default(now()) @updatedAt
}

model Reveal {
  id              Int       @id @default(autoincrement())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  questionId      Int?
  question        Question? @relation(fields: [questionId], references: [id])
  deckId          Int?
  deck            Deck?     @relation(fields: [deckId], references: [id])
  isRewardClaimed Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
}

model FungibleAssetBalance {
  asset  FungibleAsset
  amount Decimal
  userId String
  user   User          @relation(fields: [userId], references: [id])

  @@id([asset, userId])
}

enum QuestionType {
  TrueFalse
  YesNo
  MultiChoice
}

enum Token {
  Bonk
}

enum FungibleAsset {
  Point
}

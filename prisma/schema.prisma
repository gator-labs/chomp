generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model User {
  id                          String                        @id
  isAdmin                     Boolean                       @default(false)
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @default(now()) @updatedAt
  firstName                   String?
  lastName                    String?
  username                    String?
  profileSrc                  String?
  telegramId                  BigInt?                       @unique
  wallets                     Wallet[]
  emails                      Email[]
  questionAnswers             QuestionAnswer[]
  userDeck                    UserDeck[]
  chompResults                ChompResult[]
  fungibleAssetTransactionLog FungibleAssetTransactionLog[]
  revealNfts                  RevealNft[]
  tutorialCompletedAt         DateTime?
  telegramUsername            String?                       @unique
  twitterUsername             String?                       @unique
  isBotSubscriber             Boolean                       @default(false)
  MysteryBox                  MysteryBox[]
}

model Wallet {
  address   String   @id
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Email {
  address   String   @id
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Question {
  id                          Int                           @id @default(autoincrement())
  question                    String
  durationMiliseconds         BigInt?
  type                        QuestionType
  revealToken                 Token                         @default(Bonk)
  revealTokenAmount           Int                           @default(0)
  revealAtDate                DateTime?
  creditCostPerQuestion       Int?
  revealAtAnswerCount         Int?
  imageUrl                    String?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @default(now()) @updatedAt
  questionOptions             QuestionOption[]
  questionTags                QuestionTag[]
  deckQuestions               DeckQuestion[]
  chompResults                ChompResult[]
  stack                       Stack?                        @relation(fields: [stackId], references: [id])
  stackId                     Int?
  fungibleAssetTransactionLog FungibleAssetTransactionLog[]
  MysteryBoxTrigger           MysteryBoxTrigger[]
}

model QuestionOption {
  id                                    Int              @id @default(autoincrement())
  option                                String
  isCorrect                             Boolean          @default(false)
  calculatedIsCorrect                   Boolean?
  calculatedAveragePercentage           Int? // avg `percentage` column
  calculatedPercentageOfSelectedAnswers Int? // percentage of people that selected
  isLeft                                Boolean          @default(false)
  createdAt                             DateTime         @default(now())
  updatedAt                             DateTime         @default(now()) @updatedAt
  questionId                            Int
  question                              Question         @relation(fields: [questionId], references: [id])
  questionAnswers                       QuestionAnswer[]
}

model Tag {
  id           Int           @id @default(autoincrement())
  tag          String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  questionTags QuestionTag[]
}

model QuestionTag {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  tagId      Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
}

model Deck {
  id                          Int                           @id @default(autoincrement())
  deck                        String
  date                        DateTime?
  activeFromDate              DateTime?
  revealAtDate                DateTime?
  creditCostPerQuestion       Int?
  revealAtAnswerCount         Int?
  imageUrl                    String?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @default(now()) @updatedAt
  stack                       Stack?                        @relation(fields: [stackId], references: [id])
  stackId                     Int?
  deckQuestions               DeckQuestion[]
  userDeck                    UserDeck[]
  fungibleAssetTransactionLog FungibleAssetTransactionLog[]
  description                 String?
  heading                     String?
  footer                      String?                       @db.VarChar(50)
  MysteryBoxTrigger           MysteryBoxTrigger[]
}

model UserDeck {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  deckId    Int
  deck      Deck     @relation(fields: [deckId], references: [id])
}

model DeckQuestion {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  deckId     Int
  deck       Deck     @relation(fields: [deckId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  @@unique([deckId, questionId])
}

model QuestionAnswer {
  id               Int            @id @default(autoincrement())
  questionOptionId Int
  questionOption   QuestionOption @relation(fields: [questionOptionId], references: [id])
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  percentage       Int?
  status           AnswerStatus   @default(Submitted)
  selected         Boolean
  timeToAnswer     BigInt?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt

  @@unique([questionOptionId, userId], name: "question_option_user")
}

model ChompResult {
  id                       Int               @id @default(autoincrement())
  userId                   String
  user                     User              @relation(fields: [userId], references: [id])
  questionId               Int?
  question                 Question?         @relation(fields: [questionId], references: [id])
  burnTransactionSignature String?
  sendTransactionSignature String?
  rewardTokenAmount        Decimal?
  result                   ResultType
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @default(now()) @updatedAt
  transactionStatus        TransactionStatus
  needsManualReview        Boolean?
  revealNftId              String?           @unique
  revealNft                RevealNft?        @relation(fields: [revealNftId], references: [nftId])

  @@unique([userId, questionId])
  @@index([burnTransactionSignature])
  @@index([sendTransactionSignature])
  @@index([revealNftId])
}

model FungibleAssetTransactionLog {
  id                Int                @id @default(autoincrement())
  type              TransactionLogType
  asset             FungibleAsset
  createdAt         DateTime           @default(now())
  change            Decimal
  userId            String
  chainTxHash       String?
  user              User               @relation(fields: [userId], references: [id])
  question          Question?          @relation(fields: [questionId], references: [id])
  questionId        Int?
  deck              Deck?              @relation(fields: [deckId], references: [id])
  deckId            Int?
  mysteryBoxPrize   MysteryBoxPrize?   @relation(fields: [mysteryBoxPrizeId], references: [id])
  mysteryBoxPrizeId String?            @unique

  @@unique([type, userId, questionId]) // Enforce unique combination of userId and questionId
  @@unique([type, deckId, userId]) // Enforce unique combination of deckId and userId
}

model RevealNft {
  nftId     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  nftType   NftType

  chompResult ChompResult? @relation

  @@unique([nftId, userId])
}

model Stack {
  id        Int        @id @default(autoincrement())
  name      String
  isActive  Boolean
  isVisible Boolean    @default(true)
  image     String
  questions Question[]
  createdAt DateTime   @default(now())
  deck      Deck[]
}

model Banner {
  id        Int      @id @default(autoincrement())
  url       String?
  isActive  Boolean
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MysteryBox {
  id              String              @id @default(uuid())
  status          EMysteryBoxStatus   @default(New)
  userId          String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now()) @updatedAt
  triggers        MysteryBoxTrigger[]
  user            User                @relation(fields: [userId], references: [id])
  MysteryBoxPrize MysteryBoxPrize[]
}

model MysteryBoxTrigger {
  id                    String               @id @default(uuid())
  triggerType           EBoxTriggerType
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @default(now()) @updatedAt
  question              Question?            @relation(fields: [questionId], references: [id])
  questionId            Int?
  deck                  Deck?                @relation(fields: [deckId], references: [id])
  deckId                Int?
  MysteryBox            MysteryBox?          @relation(fields: [mysteryBoxId], references: [id])
  mysteryBoxId          String
  allowlist             MysteryBoxAllowlist? @relation(fields: [mysteryBoxAllowlistId], references: [address])
  mysteryBoxAllowlistId String?

  @@unique([mysteryBoxId, questionId, triggerType])
  @@unique([mysteryBoxId, deckId, triggerType])
}

model MysteryBoxPrize {
  id                          String                       @id @default(uuid())
  status                      EBoxPrizeStatus              @default(Unclaimed)
  size                        EPrizeSize
  prizeType                   EBoxPrizeType
  tokenAddress                String?
  amount                      String
  claimHash                   String?
  claimFungibleTxId           Int?
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @default(now()) @updatedAt
  claimedAt                   DateTime?
  mysteryBox                  MysteryBox                   @relation(fields: [mysteryBoxId], references: [id])
  mysteryBoxId                String
  fungibleAssetTransactionLog FungibleAssetTransactionLog?

  @@unique([mysteryBoxId, tokenAddress])
}

model MysteryBoxAllowlist {
  address           String              @id @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  tags              String?
  MysteryBoxTrigger MysteryBoxTrigger[]
}

model ChainTx {
  id               Int            @id @default(autoincrement())
  hash             String         @unique
  status           EChainTxStatus
  solAmount        String
  feeSolAmount     String
  wallet           String
  recipientAddress String
  type             EChainTxType
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
}

enum EMysteryBoxStatus {
  New
  Opened
  Unopened
}

enum EBoxTriggerType {
  ClaimAllCompleted
  DailyDeckCompleted
  ChompmasStreakAttained
  TutorialCompleted
  RevealAllCompleted
}

enum EBoxPrizeStatus {
  Dismissed
  Unclaimed
  Claimed
}

enum EPrizeSize {
  Small
  Medium
  Large
}

enum EBoxPrizeType {
  Token
  Credits
  Points
}

enum QuestionType {
  BinaryQuestion
  MultiChoice
}

enum Token {
  Bonk
}

enum FungibleAsset {
  Point
  Credit
}

enum TransactionLogType {
  RevealAnswer
  CorrectFirstOrder
  CorrectSecondOrder
  AnswerDeck
  AnswerQuestion
  ConnectX
  ConnectTelegram
  MysteryBox
  PremiumQuestionCharge
  CreditPurchase
}

enum EChainTxStatus {
  New
  Pending
  Completed
  Failed
}

enum EChainTxType {
  CreditPurchase
}

enum ResultType {
  Revealed
  Claimed
  Dismissed
}

enum TransactionStatus {
  Pending
  Completed
}

enum NftType {
  Genesis
  Glowburger
  ChompyAndFriends
  ChompyAroundTheWorld
}

enum AnswerStatus {
  Viewed
  Submitted
  TimedOut
  Skipped
}
